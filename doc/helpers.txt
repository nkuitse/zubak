HELPER SCRIPTS
==============

zubak relies on a number of helper scripts, each named zubak-NAME (for
example, the gather script is named zubak-gather); here is a complete list:

    zubak-archive
    zubak-backup
    zubak-compress
    zubak-gather
    zubak-next-backup-id
    zubak-split

zubak comes with a default implementation of each (installed in
$PREFIX/libexec/zubak) but a custom helper placed in the zubak root's `bin'
directory (/var/local/backup/bin by default) or in a target's `bin' directory
will be used (if its executable bit is set) in place of the default.

zubak-backup
------------

This is the helper script responsible for driving the backup process itself.

zubak-gather
------------

The gather script for a backup target must print backup data to standard output
and backup metadata to standard error.  The default implementation uses
`conf/sources' and `conf/filters' to invoke find(1), then pipes the output
through eubar(1).

[Obsolete:] 
If a series has no backups, zubak calls the gather script with no arguments; the
gather script is then expected to perform a full backup.  If a series already
has one or more backups, zubak will call the gather script with the base name of
the most recent backup.  Although other types of reference are possible
(differential, etc.) this is not currently implemented in zubak.

The backup data that the gather script produces should be eubar(1) data but
may if desired be in any other form -- tarball, ZIP archive, etc.  The data
stream will be saved as a series of segments in files named $BACKUP.000,
$BACKUP.001, etc.  Every segment except the last must be 64MiB (2**26 bytes)
long.

The metadata stream that the gather script produces must be in eubar(5)
metadata format; for example:

    #eubar meta 1.0
    $begin 1448994832
    +d d2050 i917505 p40710 u0 g0 m1448994707 c1448994707 /root
    +f d2050 i918105 p100600 u0 g0 m1448994707 c1448994707 *18521 /root/.viminfo
    :0 @0 *18521 /root/.viminfo
    +f d2050 i917840 p100644 u0 g0 m1431024740 c1448979170 *652979 /root/src/2015.04.17.tar.gz
    :0 @18521 *652979 /root/src/2015.04.17.tar.gz
    +f d2050 i918156 p100644 u0 g0 m1428422785 c1448979170 *805253 /root/src/nginx-1.6.3.tar.gz
    :0 @671500 *805253 /root/src/nginx-1.6.3.tar.gz
    +d d2050 i1575426 p40755 u0 g0 m1448931591 c1448931591 /root/.dvdcss
    $end 1448994834
    $size 1476753

See eubar(5) for details.

zubak-next-backup-id
--------------------

By default, the base name of a backup ($BACKUP above) is a timestamp, as
specified in `conf/timeformat'; the default format is `%Y%m%dT%H%M%SZ'.  The
timestamp format may be anything understood by strftime(3) but always reflects
the POSIX `GMT' time at which a backup began.  The next-backup-id helper may
be overridden to generate site- or backup-specific backup ID.

zubak-archive
-------------

If a target has an executable file named `archive' in its `bin' subdirectory,
then it will be called after the gather script completes successfully.  A
single argument is provided; this is the backup name, i.e., the base name of
the files in which zubak saves the backup data and metadata.

An archive script is generally used to compress data files or to do any desired
housekeeping tasks, such as updating an index of backed-up files or sending
backups to a remote server.  zubak will wait for the archive script to complete,
and in general it should spawn subprocesses to perform any time-consuming tasks.

