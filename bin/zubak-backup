#!/bin/zsh -e

# Copyright 2016 Paul Hoffman <nkuitse@nkuitse.com>
# GNU General Public License, version 3 or greater (see COPYING)

main() {

    # Command-line options
    typeset opt dryrun=false
    typeset -a log
    integer n=0 maxjobs=3
    while getopts :nj: opt; do
        case $opt in
            (n) dryrun=true ;;
            (j) maxjobs=$OPTARG ;;
            (*) usage ;;
        esac
    done
    shift $(( OPTIND - 1 ))

    typeset s=$1 b=$2
    typeset now=$(now) sdir=$PWD/series/$s bbase=$PWD/series/$s/$b

    mv $sdir/@idle $sdir/@busy  ||
    mv $sdir/@empty $sdir/@busy ||
    fatal "Can\'t set series $s to busy; may be in unknown state"
    print -l "begin $now" "target $PWD" "series $s" "backup $b" "command $backupcmd" >> $bbase.backup

    # Guts of the backup process
    typeset hash offset size file
    zubak-gather 2> $bbase.eum |
    zubak-split $bbase |
    while read hash offset size file; do
        (( n++ < maxjobs )) || { wait; n=0 }
        zubak-compress $file &
        print "@$offset *$size #$hash $file"
    done >> $bbase.backup
    wait

    # Wrap up
    grep '^[-+]' < $bbase.eum >> $sdir/all.eum
    print -l "end $(now)" >> $bbase.backup
    touch -d @$now $bbase.backup
    touch -d @$now $sdir/all.eum
    mv $sdir/@busy $sdir/@idle ||
    fatal "Can\'t set series $s to idle"

    exec zubak-archive $bbase.*

}

age-in-minutes() {
    typeset f=$1
    integer age=$(perl -e '($f, $now) = @ARGV; @s = stat($f); print("0\n"), exit 2 if !@s; print int(($now-$s[9])/60)' $f $now)
    (( $? == 0 )) || fatal "Can't stat $f"
    print $age
}

now() {
    print -P '%D{%s}'
}

fatal() {
    print -- "$@" >&2
    exit 2
}

main "$@"
